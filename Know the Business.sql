### PART B:::

-- 1.	Arrange the product id, product name based on high demand by the customer.
select * from orderitem;
select p.Id as product_id,p.ProductName as product_name
from product p join orderitem oi on p.Id= oi.ProductId group by product_id,product_name
order by sum(oi.Quantity) desc;

-- 2.	Display the number of orders delivered every year.
select * from orders;
select * from orderitem;
select * from product;

select year(OrderDate) as YR, count(Id) as no_of_orders from orders group by YR;

-- 3.	Calculate year-wise total revenue.
select * from orders;
select * from orderitem;
select * from product;

select year(OrderDate) as YR , sum(TotalAmount) as total_revenue from orders group by YR;

-- 4.	Display the customer details whose order amount is maximum including his past orders.
select * from customer;
select * from orders;

with x as (
select c.Id as customer_id,c.FirstName,c.LastName,c.Phone,c.City,c.Country,
sum(o.TotalAmount) as order_amount from customer c join orders o on c.Id=o.CustomerId
group by customer_id order by order_amount desc limit 1 offset 0
) select x.customer_id,x.FirstName,x.LastName,x.Phone,x.City,x.Country from x;

-- 5.	Display total amount ordered by each customer from high to low. (donot use sum)
select * from orders;
select * from customer;
select * from customer where Id in
(
	with x as 
    (
	  select CustomerId,sum(TotalAmount) as order_amount from orders group by CustomerId order by order_amount desc
	) 
    select x.CustomerId from x
);
/* A sales and marketing department of this company wants to find out how frequently 
customer have business with them. This can be done in two ways. (Answer Q 6 and Q 7 for the same) */
-- 6 Approach 1. List the current and previous order amount for each customers.

select o.CustomerId,o.Id as order_id,o.OrderDate as curr_order_date,o.TotalAmount as curr_amt,
lag(o.OrderDate,1,'No Date') over(partition by o.CustomerId) as prev_order_date,
lag(o.TotalAmount,1,'No Amount')
over(partition by o.CustomerId) as prev_amt from orders o;

/* 7. Approach 2. Display the customerid, order ids and the 
order dates along with the previous order date and the next order date for every customer in the table:: */

select o.CustomerId,o.Id as order_id,o.OrderDate as curr_order_date,
lag(o.OrderDate,1,'Did not order') over(partition by o.CustomerId) as prev_order_date,
lead(o.OrderDate,1,'Next Date Unavailable') over(partition by o.CustomerId) as next_order_date 
from orders o;

-- 8.	Find out top 3 suppliers in terms of revenue generated by their products.

select * from supplier;
select * from orders;
select *from product;

with cte as(
select ProductId,sum(UnitPrice*Quantity) as revenue_for_product from orderitem group by ProductId
order by revenue_for_product desc
)

select s.Id as supplier_id,s.CompanyName as supplier_name,cte.revenue_for_product
from supplier s join product p on s.Id=p.SupplierId join cte on cte.ProductId=p.Id
order by cte.revenue_for_product desc limit 3 offset 0;